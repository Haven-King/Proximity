<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:svg="http://www.w3.org/2000/svg">
  <xs:element name="Template" type="TemplateType"/>
  <xs:element name="Content" type="ContentType"/>
  <xs:complexType name="script_type">
    <xs:attribute name="src" use="required"/>
  </xs:complexType>
  <xs:simpleType name="version">
    <xs:restriction base="xs:token">
      <xs:pattern value="^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="SymbolType">
    <xs:complexContent>
      <xs:extension base="xs:string">
        <xs:sequence>
          <xs:element type="glyph_type" name="Glyphs" minOccurs="1" maxOccurs="unbounded"/>
          <xs:element type="conditionsType" name="Conditions" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="representation" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="glyph_type">
    <xs:complexContent>
      <xs:extension base="StyleType">
        <xs:attribute type="xs:string" name="glyphs" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="resource_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="assets"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="resource">
    <xs:complexContent>
      <xs:extension base="xs:string">
        <xs:attribute name="type" type="resource_type" use="required"/>
        <xs:attribute name="location" type="xs:anyURI" use="required"/>
        <xs:attribute name="version" type="version" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ResourcesType">
    <xs:complexContent>
      <xs:extension base="xs:string">
        <xs:sequence>
          <xs:element type="resource" name="Resource" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="color">
    <xs:annotation>
      <xs:documentation>The color entity indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple. As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:token">
      <xs:pattern value="#[\dA-F]{6}([\dA-F][\dA-F])?"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="capitalization">
    <xs:restriction base="xs:string">
      <xs:enumeration value="default"/>
      <xs:enumeration value="all_caps"/>
      <xs:enumeration value="no_caps"/>
      <xs:enumeration value="small_caps"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="text_alignment_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="left"/>
      <xs:enumeration value="center"/>
      <xs:enumeration value="right"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="content_alignment_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="start"/>
      <xs:enumeration value="middle"/>
      <xs:enumeration value="end"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="GradientUnits">
    <xs:restriction>
      <xs:enumeration value="objectBoundingBox"/>
      <xs:enumeration value="userSpaceOnUse"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="stopType">
    <xs:complexContent>
      <xs:extension base="xs:string">
        <xs:attribute name="offset" type="xs:float"/>
        <xs:attribute name="style" type="xs:string"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="GradientType">
    <xs:complexContent>
      <xs:extension base="xs:element">
        <xs:sequence>
          <xs:element name="stop" minOccurs="1" maxOccurs="unbounded" type="stopType"/>
          <xs:element name="Conditions" type="conditionsType"/>
        </xs:sequence>
        <xs:attribute name="id" type="id_type" use="required"/>
        <xs:attribute name="x1" type="xs:float" use="required"/>
        <xs:attribute name="y1" type="xs:float" use="required"/>
        <xs:attribute name="x2" type="xs:float" use="required"/>
        <xs:attribute name="y2" type="xs:float" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EnumerationValueType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="value" use="optional"/>
        <xs:attribute type="id_type" name="id" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="EnumerationType">
    <xs:sequence>
      <xs:element type="EnumerationValueType" name="EnumerationValue" maxOccurs="unbounded" minOccurs="2"/>
    </xs:sequence>
    <xs:attribute type="id_type" name="id" use="required"/>
    <xs:attribute type="xs:string" name="default" use="required"/>
  </xs:complexType>
  <xs:complexType name="ToggleOptionType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="id_type" name="id" use="required"/>
        <xs:attribute type="xs:boolean" name="default" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="StringOptionType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="id_type" name="id" use="required"/>
        <xs:attribute type="xs:string" name="default"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="optionsType">
    <xs:sequence>
      <xs:element type="EnumerationType" name="Enumeration" minOccurs="0"  maxOccurs="unbounded"/>
      <xs:element type="ToggleOptionType" name="ToggleOption" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element type="StringOptionType" name="StringOption" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LayerPropertyType">
    <xs:sequence>
      <xs:element type="conditionsType" name="Conditions"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AttributeModifierType">
    <xs:simpleContent>
      <xs:extension base="conditionsType">
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="value" type="xs:string" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="CardModifierType">
    <xs:simpleContent>
      <xs:extension base="conditionsType">
        <xs:attribute name="key" type="xs:string" use="required"/>
        <xs:attribute name="value" type="xs:string" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="StyleType" mixed="true">
    <xs:complexContent>
      <xs:extension base="LayerPropertyType">
        <xs:sequence>
          <xs:element type="TextShadowType" name="Shadow" minOccurs="0" maxOccurs="1"/>
          <xs:element type="OutlineType" name="Outline" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name" use="optional"/>
        <xs:attribute type="xs:string" name="font" use="optional"/>
        <xs:attribute type="xs:string" name="italicFont" use="optional"/>
        <xs:attribute type="capitalization" name="capitalization" use="optional"/>
        <xs:attribute type="color" name="color" use="optional"/>
        <xs:attribute type="xs:int" name="size" use="optional"/>
        <xs:attribute type="xs:float" name="kerning" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="stylesType">
    <xs:choice>
      <xs:element type="StyleType" name="Style" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element type="GradientType" name="linearGradient" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element type="GradientType" name="radialGradient" maxOccurs="unbounded" minOccurs="0"/>
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="RangeType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="key" use="required"/>
        <xs:attribute type="xs:int" name="min" use="optional"/>
        <xs:attribute type="xs:int" name="max" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="ConditionDefinitionType">
    <xs:simpleContent>
      <xs:extension base="conditionsType">
        <xs:attribute type="xs:string" name="name" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="condition_definitionsType">
    <xs:sequence>
      <xs:element type="ConditionDefinitionType" name="Definition" maxOccurs="unbounded" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IsEqualsType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="key" use="required"/>
        <xs:attribute type="xs:string" name="value" use="optional" default="true"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="IsPresentType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="xs:string" name="key" use="required"/>
        <xs:attribute type="xs:boolean" name="value" use="optional" default="true"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="conditionsType">
    <xs:choice maxOccurs="unbounded" minOccurs="0">
      <xs:element type="IsEqualsType" name="IsEquals"/>
      <xs:element type="IsPresentType" name="IsPresent"/>
      <xs:element type="RangeType" name="Range"/>
      <xs:element type="conditionsType" name="Or"/>
      <xs:element type="conditionsType" name="And"/>
      <xs:element type="conditionsType" name="Not" minOccurs="0"/>
      <xs:element type="FileExistsType" name="FileExists"/>
    </xs:choice>
  </xs:complexType>
  <xs:simpleType name="id_type">
    <xs:restriction base="xs:string">
      <xs:pattern value="[a-zA-Z_\-]+(\.[a-zA-Z_\-]+)*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="LayerType">
    <xs:sequence>
      <xs:element type="conditionsType" name="Conditions"/>
      <xs:element type="StyleType" name="Style"/>
      <xs:element name="Effects">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Effect" type="EffectLayerType" minOccurs="1" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Wrap">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="LayerPropertyType">
              <xs:sequence>
                <xs:element name="Rectangle" type="RectangleType" minOccurs="1" maxOccurs="unbounded"/>
              </xs:sequence>
            </xs:extension>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
      <xs:element type="RectangleType" name="Bounds"/>
      <xs:element type="AttributeModifierType" name="AttributeModifier" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element type="GroupType" name="Mask" minOccurs="0" maxOccurs="1"/>
      <xs:element type="GroupType" name="Erase" minOccurs="0" maxOccurs="1"/>
      <xs:element type="GroupType" name="Color" minOccurs="0" maxOccurs="1"/>
      <xs:element type="CardModifierType" name="CardModifier" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute type="id_type" name="id" use="optional"/>
    <xs:attribute type="xs:int" name="x"/>
    <xs:attribute type="xs:int" name="y"/>
  </xs:complexType>
  <xs:complexType name="SVGLayerType">
    <xs:complexContent>
      <xs:extension base="LayerType">
        <xs:attribute type="xs:string" name="src" use="optional"/>
        <xs:attribute type="xs:int" name="width" use="optional"/>
        <xs:attribute type="xs:int" name="height" use="optional"/>
        <xs:attribute type="content_alignment_type" name="vertical_alignment" default="middle"/>
        <xs:attribute type="content_alignment_type" name="horizontal_alignment" default="middle"/>
        <xs:attribute type="xs:boolean" name="solid" default="false"/>
        <xs:attribute type="color" name="fill"/>
        <xs:attribute type="xs:boolean" name="force_outline" default="false"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ImageLayerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="LayerType">
        <xs:sequence>
          <xs:element type="conditionsType" name="Conditions" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="src"/>
        <xs:attribute type="xs:anyURI" name="url"/>
        <xs:attribute type="xs:string" name="width"/>
        <xs:attribute type="xs:string" name="height"/>
        <xs:attribute type="content_alignment_type" name="vertical_alignment" default="middle"/>
        <xs:attribute type="content_alignment_type" name="horizontal_alignment" default="middle"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="LayoutType">
    <xs:complexContent>
      <xs:extension base="GroupType">
        <xs:attribute name="width" type="xs:int" use="optional"/>
        <xs:attribute name="height" type="xs:int" use="optional"/>
        <xs:attribute name="alignment" type="content_alignment_type"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="EffectLayerType">
    <xs:complexContent>
      <xs:extension base="LayerType">
        <xs:attribute name="name" type="id_type"/>
        <xs:anyAttribute/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="GroupType">
    <xs:complexContent>
      <xs:extension base="LayerType">
        <xs:sequence>
          <xs:element type="ImageLayerType" name="Image"/>
          <xs:element type="GroupType" name="Selector"/>
          <xs:element type="ForkType" name="Fork"/>
          <xs:element type="TextLayerType" name="Text"/>
          <xs:element type="GroupType" name="Group"/>
          <xs:element type="SpacingLayerType" name="Spacer"/>
          <xs:element type="FillLayerType" name="Rectangle"/>
          <xs:element type="LayoutType" name="HorizontalLayout"/>
          <xs:element type="LayoutType" name="VerticalLayout"/>
          <xs:element type="SVGLayerType" name="SVG"/>
          <xs:element type="SpacingLayerType" name="Noise"/>
          <xs:element type="SquishBoxType" name="SquishBox"/>
          <xs:element type="EffectLayerType" name="Effect"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BranchType" mixed="true">
    <xs:simpleContent>
      <xs:extension base="conditionsType">
        <xs:attribute type="id_type" name="id" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="branchesType">
    <xs:sequence>
      <xs:element type="BranchType" name="Branch" maxOccurs="unbounded" minOccurs="2"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ForkType">
    <xs:complexContent>
      <xs:extension base="GroupType">
        <xs:sequence>
          <xs:element type="branchesType" name="Branches" minOccurs="1" maxOccurs="1"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="TextLayerType" mixed="true">
    <xs:complexContent>
      <xs:extension base="LayerType">
        <xs:sequence>
          <xs:element type="RectangleType" name="Wrap" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute type="text_alignment_type" name="alignment" use="optional" default="left"/>
        <xs:attribute type="xs:string" name="value" use="required"/>
        <xs:attribute type="xs:int" name="width" use="optional"/>
        <xs:attribute type="xs:int" name="height" use="optional"/>
        <xs:attribute type="xs:string" name="style" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="layersType">
    <xs:simpleContent>
      <xs:extension base="GroupType"/>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="SquishBoxType">
    <xs:complexContent>
      <xs:extension base="LayerType">
        <xs:sequence>
          <xs:element type="GroupType" name="Main"/>
          <xs:element type="GroupType" name="Flex"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="TextShadowType">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute type="color" name="color" use="required"/>
        <xs:attribute type="xs:int" name="dX" use="required"/>
        <xs:attribute type="xs:int" name="dY" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:simpleType name="join_type">
    <xs:restriction base="xs:string">
      <xs:enumeration value="miter"/>
      <xs:enumeration value="round"/>
      <xs:enumeration value="bevel"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="OutlineType">
    <xs:simpleContent>
      <xs:extension base="LayerPropertyType">
        <xs:attribute type="color" name="color" use="required"/>
        <xs:attribute type="xs:float" name="weight" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="SpacingLayerType">
    <xs:simpleContent>
      <xs:extension base="LayerType">
        <xs:attribute type="xs:int" name="x"/>
        <xs:attribute type="xs:int" name="y"/>
        <xs:attribute type="xs:int" name="width" use="required"/>
        <xs:attribute type="xs:int" name="height" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="FillLayerType">
    <xs:simpleContent>
      <xs:extension base="SpacingLayerType">
        <xs:attribute type="color" name="color"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="RectangleType">
    <xs:complexContent>
      <xs:extension base="LayerPropertyType">
        <xs:attribute type="xs:int" name="x" use="required"/>
        <xs:attribute type="xs:int" name="y" use="required"/>
        <xs:attribute type="xs:int" name="width" use="required"/>
        <xs:attribute type="xs:int" name="height" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="SymbolsType">
    <xs:complexContent>
      <xs:extension base="xs:string">
        <xs:sequence>
          <xs:element name="Symbol" type="SymbolType" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="ScriptLocation">
    <xs:restriction base="xs:token">
      <xs:pattern value="[a-zA-Z]+(.[a-zA-Z]+)*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="Task">
    <xs:attribute name="location" type="ScriptLocation" use="required"/>
  </xs:complexType>
  <xs:complexType name="NamedTask">
    <xs:complexContent>
      <xs:extension base="Task">
        <xs:attribute name="name" type="xs:string" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ContentType">
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element type="optionsType" name="Options" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Imports" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Import" minOccurs="0" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="src" type="xs:string" use="required"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="Plugins" minOccurs="0" maxOccurs="1">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="Import" minOccurs="0" maxOccurs="unbounded">
              <xs:complexType>
                <xs:attribute name="repository" type="xs:anyURI" use="required"/>
                <xs:attribute name="group" type="xs:string" use="required"/>
                <xs:attribute name="artifact" type="xs:string" use="required"/>
                <xs:attribute name="version" type="version" use="required"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element type="stylesType" name="Styles" minOccurs="0" maxOccurs="1"/>
      <xs:element type="condition_definitionsType" name="ConditionDefinitions" minOccurs="0" maxOccurs="1"/>
      <xs:element type="ResourcesType" name="Resources" minOccurs="0" maxOccurs="1"/>
      <xs:element type="SymbolsType" name="Symbols" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Tasks">
        <xs:complexType>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="DataPreparation" type="Task"/>
            <xs:element name="DataFinalization" type="Task"/>
            <xs:element name="AttributeModifier" type="NamedTask"/>
            <xs:element name="TextFunction" type="NamedTask"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:choice>
  </xs:complexType>
  <xs:complexType name="TemplateType">
    <xs:complexContent>
      <xs:extension base="ContentType">
        <xs:sequence>
          <xs:element type="layersType" name="Layers" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute type="xs:string" name="name"/>
        <xs:attribute type="xs:string" name="author"/>
        <xs:attribute type="xs:string" name="width" use="required"/>
        <xs:attribute type="xs:string" name="height" use="required"/>
        <xs:attribute type="version" name="template_version"/>
        <xs:attribute type="version" name="proximity_version" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="FileExistsType">
    <xs:attribute type="xs:string" name="src"/>
  </xs:complexType>
</xs:schema>